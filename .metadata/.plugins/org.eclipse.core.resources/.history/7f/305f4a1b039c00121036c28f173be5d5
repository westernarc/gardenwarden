package com.westernarc.gardenwarden;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.PerspectiveCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.g3d.loaders.ModelLoaderRegistry;
import com.badlogic.gdx.graphics.g3d.materials.ColorAttribute;
import com.badlogic.gdx.graphics.g3d.materials.Material;
import com.badlogic.gdx.graphics.g3d.materials.TextureAttribute;
import com.badlogic.gdx.math.Quaternion;
import com.badlogic.gdx.math.Vector3;
import com.westernarc.gardenwarden.Node.Node;
import com.westernarc.gardenwarden.Node.PlayerNode;

public class GardenWarden implements ApplicationListener {
	private float SCREEN_WIDTH;
	private float SCREEN_HEIGHT;
	
	private OrthographicCamera cam2d;
	private PerspectiveCamera cam3d;
	private SpriteBatch batch;
	
	float camAngle;
	float camDistance;

	//Game flow:
	//Splash Screen: 
	private enum GAME_STATE {
		splash, title, play, 
	}
	private GAME_STATE gameState;
	
	PlayerNode nodPlayer;
	Node nodGarden;
	
	@Override
	public void create() {		
		SCREEN_WIDTH = Gdx.graphics.getWidth();
		SCREEN_HEIGHT = Gdx.graphics.getHeight();
		
		cam2d = new OrthographicCamera(SCREEN_WIDTH, SCREEN_HEIGHT);
		batch = new SpriteBatch();
		
		cam3d = new PerspectiveCamera(67, SCREEN_WIDTH, SCREEN_HEIGHT);
		camDistance = 400;
		camAngle = (float)-Math.PI/2f;
		cam3d.position.set((float)Math.sin(camAngle) * camDistance, 500, (float)Math.cos(camAngle) * camDistance);
		cam3d.lookAt(0, 70, 0);
		cam3d.far = 2000;
		
		
		nodPlayer = new PlayerNode();
		nodGarden = new Node();
		nodGarden.setModel(ModelLoaderRegistry.loadStillModel(Gdx.files.internal("models/garden.g3dt")));
		nodGarden.setMaterial(new Material("mat", new TextureAttribute(new Texture(Gdx.files.internal("textures/gardentex.png")), 0, "s_tex"), new ColorAttribute(Color.WHITE, ColorAttribute.diffuse)));
	}

	@Override
	public void dispose() {
		batch.dispose();
	}

	@Override
	public void render() {
		float tpf = Gdx.graphics.getDeltaTime();
		
		Gdx.gl10.glClearColor(0.2f, 0.2f, 0.2f, 1);
		
		Gdx.gl10.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
		Gdx.gl10.glEnable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glEnable(GL10.GL_TEXTURE_2D);
		Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);
		
		Gdx.gl10.glScalef(20, 20, 20);
		Gdx.gl10.glPushMatrix();
		Gdx.gl10.glTranslatef(nodPlayer.getX(), nodPlayer.getY(), nodPlayer.getZ());
		Gdx.gl10.glRotatef(nodPlayer.getRotationW(), nodPlayer.getRotationX(), nodPlayer.getRotationY(), nodPlayer.getRotationZ());
		nodPlayer.render();
		Gdx.gl10.glPopMatrix();
		
		nodGarden.render();
		Gdx.gl10.glDisable(GL10.GL_DEPTH_TEST);
		Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
		Gdx.gl10.glDisable(GL10.GL_COLOR_MATERIAL);
		
		//Draw 3d
		batch.setProjectionMatrix(cam2d.combined);
		batch.begin();
		batch.end();
		

		if(Gdx.input.isKeyPressed(Keys.A)){
			nodPlayer.rotate(new Quaternion(Vector3.Y, 90f));
		}
		if(Gdx.input.isKeyPressed(Keys.S)){
		}
		if(Gdx.input.isKeyPressed(Keys.D)){
		}
		if(Gdx.input.isKeyPressed(Keys.W)){
		}
		if(Gdx.input.isKeyPressed(Keys.R)){
			nodPlayer.setAnim(PlayerNode.ANIM.walk);
		}
		if(Gdx.input.isKeyPressed(Keys.E)){
			nodPlayer.setAnim(PlayerNode.ANIM.stand);
		}
		cam3d.position.set((float)Math.sin(camAngle) * camDistance, 500, (float)Math.cos(camAngle) * camDistance);
		cam3d.lookAt(0, 70, 0);
		cam3d.update(true);
		cam3d.apply(Gdx.gl10);
		
		
		
		nodPlayer.update(tpf);
	}

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
